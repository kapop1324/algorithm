import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

import javax.swing.plaf.synth.SynthSeparatorUI;
 
public class Main {    
 
   
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        int k = Integer.parseInt(st.nextToken());
        int x = Integer.parseInt(st.nextToken());
        
        int start = x-1;
        ArrayList<Node>[] list = new ArrayList[n];
        
        for(int i = 0; i < n; i++) {
        	list[i] = new ArrayList<>();
        }
        
        
        
        
        for(int i = 0; i < m; i++) {
        	st = new StringTokenizer(br.readLine(), " ");
        	int a = Integer.parseInt(st.nextToken())-1;
        	int b = Integer.parseInt(st.nextToken())-1;
        	list[a].add(new Node(b,0));
        }
        
        
        
        
        int[] d = new int[n];
        boolean[] visit = new boolean[n];
        
        Arrays.fill(d, -1);
        
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.add(new Node(start,0));
        
        while(!pq.isEmpty()) {
        	Node a = pq.poll();
        	
        	if(visit[a.edge] == false) {
        		visit[a.edge] = true;
        		d[a.edge] = a.value;
        	
        		for(int i = 0; i < list[a.edge].size(); i++) {
        			pq.add(new Node(list[a.edge].get(i).edge,a.value + 1));
        		}
        	}
        }
        
        boolean result = false;
        
        for(int i = 0; i < n; i++) {
        
        	if(d[i] == k) {
        		System.out.println(i+1);
        		result = true;
        	}
        	
        }
        
        if(result == false) {
        	System.out.println(-1);
        }
    }    
    
    
 

}

class Node implements Comparable<Node>{
    int edge;
    int value;

    public Node(int edge, int value){
        this.edge = edge;
        this.value = value;
    }

    @Override
    public int compareTo(Node o) {
        return value - o.value;
    }
}
