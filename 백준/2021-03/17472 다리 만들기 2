import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
 
public class Main {
	
	public static int[] dx = {0,0,1,-1};
	public static int[] dy = {1,-1,0,0};
	public static int[] parent;
	
	public static int n, m;
	public static int[][] map;
	public static boolean[][] visit;
	
	public static int dis;
	public static ArrayList<Node> list;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		 StringTokenizer st = new StringTokenizer(br.readLine()," ");
		
		 n = Integer.parseInt(st.nextToken());
		 m = Integer.parseInt(st.nextToken());
		 
		 map = new int[n][m];
		 visit = new boolean[n][m];
		 
		
		
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());

			}
		}
		
		dis = 0;
	
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(visit[i][j] == false && map[i][j] != 0) {
					visit[i][j] = true;
					dis+=1;
					map[i][j] = dis;
					dfs(i,j);
				}
			}
		
		}
		
	
		list = new ArrayList<>();
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(map[i][j] != 0) {
					dfs2(i,j,map[i][j]);
				}
			}
							
		}

		parent = new int[dis+1];
		
		for(int i = 1; i <= dis; i++) {
			parent[i] = i;
		}
		
		kruskal();
	
			
	}
		
	public static void kruskal() {
		
		Collections.sort(list);
		int cnt = 0;
		int length = 0;
		
		for(Node node : list) {
			if(find(node.start) != find(node.end)) {
				union(node.start,node.end);
					length += node.dis;
					cnt++;
				
				
			}
		}
		
		if(cnt != dis-1) {
			System.out.println(-1);
		}
		else {
			System.out.println(length);
		}
		
	}
	
	public static int find(int a) {
		if(parent[a] == a) {
			return a;
		}
		
		parent[a] = find(parent[a]);
		return parent[a];
	}
		
	public static boolean union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		if (aRoot == bRoot)
			return false;

		parent[bRoot] = aRoot;
		return true;
	}
	
	public static void dfs(int x, int y) {

		
		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			if(nx < 0 || ny < 0 || nx >= n || ny >= m) {
				continue;
			}
			
			if(visit[nx][ny] == false && map[nx][ny] != 0) {
				map[nx][ny] = dis;
				visit[nx][ny] = true;
				dfs(nx,ny);
			}
				

		}
		
		
	}
	
	public static void dfs2(int x, int y, int cnt) {
		
		for(int i = 0; i < 4; i++) {
			int nx = x + dx[i];
			int ny = y + dy[i];
			
			int distance = 0;
			boolean flag = false;
			
			while(true) {
				
				if(nx >= n || ny >= m || nx < 0 || ny < 0 || map[nx][ny] == cnt) {
					break;
				}
				
				if(map[nx][ny] != 0) {
					flag= true;
					break;
				}
				
				distance++;
				nx += dx[i];
				ny += dy[i];
				
			}
			
			if(flag == true) {
				if(distance < 2) continue;
				list.add(new Node(cnt,map[nx][ny],distance));
				
			}
			
		}
     
	       
	         
	}
	
	static class Node implements Comparable<Node>{
		int start,end,dis;

		public Node(int start, int end, int dis) {
			
			this.start = start;
			this.end = end;
			this.dis = dis;
		}

		@Override
		public int compareTo(Node o) {
			return this.dis-o.dis;
		}
		
	}
	
	
}

