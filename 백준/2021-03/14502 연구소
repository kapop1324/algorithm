import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
 
public class Main {
	
	public static int[] dx = {0,0,1,-1};
	public static int[] dy = {1,-1,0,0};

	
	public static int n,m;
	public static int result;
	public static int[][] map;
	public static int[][] copy;
	public static boolean[][] visit;
	
 
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		
		
		
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		 n = Integer.parseInt(st.nextToken());
		 m = Integer.parseInt(st.nextToken());
		
		 map = new int[n][m];
		 visit = new boolean[n][m];
		result = 0;
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine()," ");
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());

			}
		}
		
	
		dfs(0);
		
		
		
		System.out.println(result);
	}
	
	public static void dfs(int idx) {
		
		if(idx == 3) {
			
		
			
			bfs();
			

			return;
		}
		
		   for(int i = 0; i < n; i++) {
	            for(int j = 0 ; j < m; j++) {
	            	if(map[i][j] == 0) {
	    				map[i][j] = 1;
	    				dfs(idx+1);
	    				map[i][j] = 0;
	    			}
	            }
			
			
		   }
		
	}
	
	public static void bfs() {
		
		
		int[][] virus = new int[n][m];
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				virus[i][j] = map[i][j];
			}
			
		}
		
		
		Queue<Node> q = new LinkedList<>();
		
		
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(map[i][j] == 2) {
					q.add(new Node(i,j));
				}
			}
		}
		
		while(!q.isEmpty()) {
			Node cur = q.poll();
			
			int x = cur.x;
			int y = cur.y;
			
			
			
			for(int i = 0; i < 4; i++) {
				int nx = x + dx[i];
				int ny = y + dy[i];
				
				if(nx < 0 || ny < 0 || nx >= n || ny >= m) {
					continue;
				}
				
				if(virus[nx][ny] == 0) {
					virus[nx][ny] = 2;
					q.add(new Node(nx,ny));
				}
				
				
			}
			
			
		}
		
		int cnt = 0;
		
		for(int i = 0; i < n; i++) {
			for(int j = 0; j < m; j++) {
				if(virus[i][j] == 0) {
					cnt++;
				}
			}
		}
		result = Math.max(result, cnt);
		
	}
	
	
	
	public static class Node{
		
		int x, y;
		
		public Node(int x, int y) {
			
			this.x = x;
			this.y = y;
			
			
		}
		
	}
	
}
