import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
 
public class Main {
	
	public static int[] dx = {0,0,1,-1};
	public static int[] dy = {1,-1,0,0};
	
	public static int n;
	public static int m;
	public static int[][] map;
	public static int[][] visit;
 
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		
		
		
		 n = Integer.parseInt(st.nextToken());
		 m = Integer.parseInt(st.nextToken());
		
		 map = new int[n][m];
		 visit = new int[n][m];
		
		for(int i = 0; i < n; i++) {
			String s = br.readLine();
			for(int j = 0; j < m; j++) {
				map[i][j] = Integer.parseInt(s.substring(j,j+1));
				visit[i][j] = 2;
			}
		}
		
		
		bfs(0,0);
 
	}
	
	public static void bfs(int x, int y) {

		
		Queue<Node> q = new LinkedList<>();
		
		q.add(new Node(x,y,1,0));
		visit[x][y] = 0;
		
		while(!q.isEmpty()) {
			
			Node a = q.poll();
		
			
			if(a.x == n-1 && a.y == m-1) {
				System.out.println(a.cnt);
				return;
			}
			
			for(int i = 0; i < 4; i++) {
				int nx = a.x + dx[i];
				int ny = a.y + dy[i];
				
				if(nx < 0 || ny < 0 || nx >= n || ny >= m) {
					continue;
				}
				
				
				if(visit[nx][ny] > a.wall) {
					if(map[nx][ny] == 0) {
						q.add(new Node(nx,ny,a.cnt+1,a.wall));
						visit[nx][ny] = a.wall;
					}else {
						if(a.wall == 0) {
							q.add(new Node(nx,ny,a.cnt+1,1));
							visit[nx][ny] = a.wall + 1;
						}
					}
				}
				
				
			
				
				
			}
			
		}
		System.out.println(-1);
	}
	static class Node{
		int x;
		int y;
		int cnt;
		int wall;
		public Node(int x, int y, int cnt, int wall) {
			this.x = x;
			this.y = y;
			this.cnt = cnt;
			this.wall = wall;
		}
	}
}

