import java.io.*;
import java.util.*;
 
public class Main {
	
	static int n,k;
	static boolean[] visit;
	static String[] arr;
	static int result;

	public static void main(String[] args) throws NumberFormatException, IOException {
	       
		  BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		  StringTokenizer st = new StringTokenizer(br.readLine()," ");
		  n = Integer.parseInt(st.nextToken());
		  k = Integer.parseInt(st.nextToken());
		  
		  visit = new boolean[26];
		  arr = new String[n];
		  
		  result = 0;
		  
		  if(k < 5) {
			 System.out.println(0);
			 return;
		  }else if(k==26) {
			  System.out.println(n);
			  return;
		  }
		  
		  visit['a' - 'a'] = true;
		  visit['c' - 'a'] = true;
		  visit['t' - 'a'] = true;
		  visit['i' - 'a'] = true;
		  visit['n' - 'a'] = true;
		  
		  for(int i = 0; i < n; i++) {
			  String word = br.readLine();
			  arr[i] = word.substring(4,word.length()-4);
		  }
		  
		  dfs(0,0);
		  System.out.println(result);
		  
	}
	 private static void dfs(int idx, int cnt){
	    
		if(cnt == k-5) {
			
			 int temp = 0;
			 
	            for (int i = 0; i < n; i++) {
	                boolean flag = true;

	                for (int j = 0; j < arr[i].length(); j++) {
	      
	                    if (!visit[arr[i].charAt(j) - 'a']) {
	                        flag = false;
	                        break;
	                    }
	                }

	                if (flag) {
	                    temp++;
	                }
	            }
	            result = Math.max(temp, result);
	            return;
		}
		
		
		for(int i = idx; i < 26; i++) {
			
			if(visit[i] == false) {
				visit[i] = true;
				dfs(i,cnt+1);
				visit[i] = false;
			}
			
		}
	    	
	    	
	    	
	 }
    



}

