import java.io.*;
import java.util.*;

public class Main {
	
	static int[] dx = {0,0,1,-1};
	static int[] dy = {1,-1,0,0};
	static int n, m, result;
	static int[][] map;
	static boolean[][] visit;
	
    public static void main(String args[]) throws IOException {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        
        m = Integer.parseInt(st.nextToken());
        n = Integer.parseInt(st.nextToken());
        result = 0;
        
        map = new int[n][m];
        visit = new boolean[n][m];
        
        for(int i = 0; i < n; i++) {
        	String s = br.readLine();
        	for(int j = 0; j< m; j++) {
        		map[i][j] = Integer.parseInt(s.substring(j,j+1));
        	}
        }
        
        System.out.println(bfs(0,0));
    	
    	

    }
    
    public static int bfs(int x, int y) {
    	
    	PriorityQueue<node> pq = new PriorityQueue<>();
        pq.offer(new node(x,y,0));
        visit[x][y] = true;
        
        while(!pq.isEmpty()) {
        	
        	node cur = pq.poll();
        	
        	if(cur.x == n-1 && cur.y == m-1) {
        		
        		return cur.cnt;
        	}
        	
        	for(int i = 0; i < 4; i++) {
        		int nx = cur.x + dx[i];
        		int ny = cur.y + dy[i];
        		
        		if(nx < 0 || ny < 0 || nx > n-1 || ny > m-1) {
        			continue;
        		}
        		
        		if(visit[nx][ny] == false && map[nx][ny] == 0) {
        			visit[nx][ny] = true;
        			pq.offer(new node(nx,ny,cur.cnt));
        		}
        		
        		if(visit[nx][ny] == false && map[nx][ny] == 1) {
        			visit[nx][ny] = true;
        			pq.offer(new node(nx,ny,cur.cnt+1));
        		}
        		
        	}
        	
        }
    	
    	
    	return 0;
    	
    	
    }
    
    
    
   
    

}

class node implements Comparable<node>{
	
	int x, y, cnt;
	
	node(int x, int y, int cnt){
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
	
	@Override
	public int compareTo(node o) {
		
		return cnt - o.cnt;
	}
	
}

 
