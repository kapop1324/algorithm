import java.io.*;
import java.util.*;

public class Main {
	
	static int m,n,k;
	static int[] dx = {0,0,1,-1};
	static int[] dy = {1,-1,0,0};
	static boolean[][] map;
	static int cnt;
	static ArrayList<Integer> list = new ArrayList<>();
	
    public static void main(String args[]) throws IOException {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	
    	m = Integer.parseInt(st.nextToken());
    	n = Integer.parseInt(st.nextToken());
    	k = Integer.parseInt(st.nextToken());
    	
    	map = new boolean[m][n];
    	
    	for(int i = 0; i < k; i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		int lx = Integer.parseInt(st.nextToken());
    		int ly = Integer.parseInt(st.nextToken());
    		int rx = Integer.parseInt(st.nextToken());
    		int ry = Integer.parseInt(st.nextToken());
    		
    		for(int j = ly; j < ry; j++) {
    			for(int t = lx; t < rx; t++) {
    				map[j][t] = true;
    			}
    		}
    	}
    	
    	for(int i = 0; i < m; i++) {
    		for(int j = 0; j < n; j++) {
    			if(map[i][j] == false) {
    				cnt = 0;
    				dfs(i,j);
    				list.add(cnt);
    			}
    		}
    	}
    	
    	Collections.sort(list);
    	System.out.println(list.size());
    	for(int i : list) {
    		System.out.print(i+" ");
    	}
    	
    }
    
    public static void dfs(int x, int y) {
    	
    	map[x][y] = true;
    	cnt++;
    	
    	for(int i = 0; i < 4; i++) {
    		int nx = x + dx[i];
    		int ny = y + dy[i];
    		
    		if(nx < 0 || ny < 0 || nx >= m || ny >= n || map[nx][ny] == true) continue;
    	
    		dfs(nx,ny);
    		
    	}
    	
    	
    }
    
   
    
}
