import java.io.*;
import java.util.*;

public class Main {
	
	static int n,k;
	static boolean[] visit = new boolean[100001];
	
	
    public static void main(String args[]) throws IOException {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	n = Integer.parseInt(st.nextToken());
    	k = Integer.parseInt(st.nextToken());
    	
    	if(n==k) {
    		System.out.println(0);
    	}else {
    		bfs(n);
    	}
    	
    	
    	
    	
    }
    
    public static void bfs(int num) {
    	
    	Queue<node> q = new LinkedList<>();
    	q.add(new node(num,1));
    	visit[num] = true;

    	
    	while(!q.isEmpty()) {
    		node cur = q.poll();
    		
    		for(int i = 0; i < 3; i++) {
    			
    			int next = 0;
    			
    			if(i == 0) {
    				next = cur.point + 1;
    			}else if(i==1) {
    				next = cur.point - 1;
    			}else {
    				next = cur.point * 2;
    			}
    			
    			if(next == k) {
    				System.out.println(cur.cnt);
    				return;
    			}
    			
    			if(next >= 0 && next < visit.length && visit[next] == false) {
    				q.add(new node(next,cur.cnt+1));
    				visit[next] = true;
    			}
    			
    		}

    	}
    	
    	
    	
    	
    }   
    static class node{
		int point, cnt;
		node(int point, int cnt){
			this.point = point;
			this.cnt = cnt;
		}
	}
}
