import java.io.*;
import java.util.*;

public class Main {
	
	static int n,m;
	static char[][] map;
	static boolean[][] visit;
	static int[] dx = {0,0,1,-1};
	static int[] dy = {1,-1,0,0};
	static int sheep = 0;
	static int wolf = 0;
	
    public static void main(String args[]) throws IOException {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st = new StringTokenizer(br.readLine()," ");
    	n = Integer.parseInt(st.nextToken());
    	m = Integer.parseInt(st.nextToken());
    	
    	map = new char[n][m];
    	visit = new boolean[n][m];
    	
    	for(int i = 0; i < n; i++) {
    		String s = br.readLine();
    		for(int j = 0; j < m; j++) {
    			map[i][j] = s.charAt(j);
    		}
    		
    	}
    	
    	for(int i = 0; i < n; i++) {
    		for(int j = 0; j < m; j++) {
    			if(visit[i][j] == false && map[i][j] != '#') {
    				bfs(i,j);
    			}
    		}
    		
    	}
    	
    	System.out.println(sheep+" "+wolf);
    	
    	
    }
    
    public static void bfs(int x, int y) {
    	
    	Queue<node> q = new LinkedList<>();
    	q.add(new node(x,y));
    	visit[x][y] = true;
    	int w = 0;
    	int sh = 0;
    	
    	while(!q.isEmpty()) {
    		node cur = q.poll();
    		
    		if(map[cur.x][cur.y] == 'o') {
    			sh++;
    		}else if(map[cur.x][cur.y] == 'v') {
    			w++;
    		}
    		
    		for(int i = 0; i < 4; i++) {
    			int nx = cur.x + dx[i];
    			int ny = cur.y + dy[i];
    			
    			if(nx < 0 || ny < 0 || nx >= n || ny >=m) continue;
    			if(map[nx][ny] == '#') continue;
    			if(visit[nx][ny] == true) continue;
    			
    			visit[nx][ny] = true;
    			q.add(new node(nx,ny));
    			
    		}
    		
    	}
    	
    	if(sh > w) {
    		sheep += sh;
    	}else {
    		wolf += w;
    	}
    	
    	
    }
    
    static class node{
    	
    	int x,y;
    	
    	node(int x, int y){
    		this.x = x;
    		this.y = y;
    	}
    	
    }
    
   
    
}
