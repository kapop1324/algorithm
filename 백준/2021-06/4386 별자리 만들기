import java.io.*;
import java.util.*;

public class Main {
	
	static class node implements Comparable<node>{
		
		int edge;
		double weight;
		
		public node(int edge, double weight) {
			this.edge = edge;
			this.weight = weight;
		}

		@Override
		public int compareTo(node o) {
			
			if(this.weight - o.weight > 0) {
				return 1;
			}else if(this.weight - o.weight == 0) {
				return 0;
			}else {
				return -1;
			}
		}
		
	}
	
	static int n;
	
	public static double[][] star;
	public static ArrayList<node>[] graph;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		n = Integer.parseInt(br.readLine());
		
		star = new double[n][2];
		graph = new ArrayList[n];
		
		for(int i = 0; i <n; i++) {
			st = new StringTokenizer(br.readLine()," ");
			star[i][0] = Double.parseDouble(st.nextToken());
			star[i][1] = Double.parseDouble(st.nextToken());
			graph[i] = new ArrayList<>();
		}
		
		for(int i = 0; i< n; i++) {
			for(int j = i+1; j <n; j++) {
				double dis = Math.sqrt(Math.pow(star[i][0] - star[j][0],2) + Math.pow(star[i][1] - star[j][1],2));
				graph[i].add(new node(j,dis));
				graph[j].add(new node(i,dis));
			}
		}
		
		double result = 0.0;
		int cnt = 0;
		
		boolean visit[] = new boolean[n];
		
		PriorityQueue<node> pq = new PriorityQueue<>();
		
		pq.add(new node(0,0));
		
		while(!pq.isEmpty()) {
			
			node cur = pq.poll();
			
			if(visit[cur.edge]) {
				continue;
			}
			
			result += cur.weight;
			visit[cur.edge] = true;
			
			for(node n : graph[cur.edge]) {
				if(!visit[n.edge]) {
					pq.offer(n);
				}
			}
			
			if(++cnt == n) {
				break;
			}
			
			
		}
		
		System.out.println(Math.round(result * 100) / 100.0);
	
		
	}

	
	
	
}
