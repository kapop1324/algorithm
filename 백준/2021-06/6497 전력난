import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class Main {
	
	static class node implements Comparable<node>{
		
		int start, end;
		int weight;
		
		public node(int start, int end, int weight) {
			this.start = start;
			this.end = end;
			this.weight = weight;
		}

		@Override
		public int compareTo(node o) {
			
			return o.weight >= this.weight ? -1 : 1;
		}
		
	}
	
	static int n,m;
	static int[] parent;
	static ArrayList<node> list;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		while(true) {
			st = new StringTokenizer(br.readLine());
			int m = Integer.parseInt(st.nextToken());
			int n = Integer.parseInt(st.nextToken());
			
			if(m==0 && n == 0) {
				break;
			}
			
			list = new ArrayList<>();
			
			int result = 0;
			
			for(int i = 0; i < n; i++) {
				st = new StringTokenizer(br.readLine());
				int s = Integer.parseInt(st.nextToken());
				int e = Integer.parseInt(st.nextToken());
				int w = Integer.parseInt(st.nextToken());
				
				list.add(new node(s,e,w));
				
				result += w;
				
			}
			
			Collections.sort(list);
			
			parent = new int[m];
			
			for(int i = 0; i < m; i++) {
				parent[i] = i;
			}
			
			int min = 0;
			
			for(int i =0; i < list.size(); i++) {
				node node = list.get(i);
				
				if(find(node.start) != find(node.end)) {
					min += node.weight;
					union(node.start,node.end);
				}
				
			}
			
			System.out.println(result - min);
			
		}
		
		
	}
	    
	public static int find(int a) {
		
		if(a == parent[a]) {
			return a;
		}
		
		parent[a] = find(parent[a]);
		
		return parent[a];
	}
	
	public static void union(int a, int b) {
		
		int aroot = find(a);
		int broot = find(b);
		
		if(aroot != broot) {
			parent[broot] = a;
		}else {
			return;
		}
		
	}
	
	
}
