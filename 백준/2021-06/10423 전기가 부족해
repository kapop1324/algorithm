import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class Main {
	
	static class node implements Comparable<node>{
		
		int start, end;
		int weight;
		
		public node(int start, int end, int weight) {
			this.start = start;
			this.end = end;
			this.weight = weight;
		}

		@Override
		public int compareTo(node o) {
			
			return this.weight - o.weight;
		}
		
	}
	
	static int n,m,k;
	static int[] parent;
	static ArrayList<node> list;
	static ArrayList<Integer> power;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		
		n = Integer.parseInt(st.nextToken());
		m = Integer.parseInt(st.nextToken());
		k = Integer.parseInt(st.nextToken());
		
		list = new ArrayList<>();
		power = new ArrayList<>();
		
		parent = new int[n+1];
		
		
		for(int i = 1; i <= n; i++) {
			parent[i] = i;
		}
		
		st = new StringTokenizer(br.readLine()," ");
		for(int i = 0; i < k; i++) {
			power.add(Integer.parseInt(st.nextToken()));
		}
		
			
		int result = 0;
			
		for(int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int z = Integer.parseInt(st.nextToken());
				
			list.add(new node(x,y,z));

			}

			
			Collections.sort(list);
			
			
			for(int i =0; i < list.size(); i++) {
				node node = list.get(i);
				
				if(!sameparent(node.start,node.end)) {
					result += node.weight;
					union(node.start,node.end);
				}
				
			}
			
			System.out.println(result);
			
		
		
		
	}
	
	public static boolean sameparent(int a, int b) {
		if(power.contains(find(a)) && power.contains(find(b))) {
			return true;
		}
			return find(a) == find(b);
		
	}
	    
	public static int find(int a) {
		
		if(a == parent[a]) {
			return a;
		}
		
		return parent[a] = find(parent[a]);
	}
	
	public static void union(int a, int b) {
		
		int aroot = find(a);
		int broot = find(b);
		
		if(power.contains(aroot) && !power.contains(broot)) {
			parent[broot] = aroot;
		}else if(!power.contains(aroot) && power.contains(broot)) {
			parent[aroot] = broot;
		}else {
			if(aroot < broot) {
				parent[broot] = aroot;
			}else {
				parent[aroot] = broot;
			}
		}
		
	}
	
	
}
