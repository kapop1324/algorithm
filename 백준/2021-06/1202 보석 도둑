import java.io.*;
import java.util.*;

public class Main {
	
	static class jewelry {
		int weight;
		int value;
		public jewelry(int weight, int  value) {
			this.weight = weight;
			this.value = value;
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine()," ");
		
		int n = Integer.parseInt(st.nextToken());
		int k = Integer.parseInt(st.nextToken());
		
		ArrayList<jewelry> jewelry_list = new ArrayList<>();
		
		for(int i = 0; i < n ; i++) {
			st = new StringTokenizer(br.readLine()," ");
			int w = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			jewelry_list.add(new jewelry(w,v));
			
		}
		
		Collections.sort(jewelry_list, new Comparator<jewelry>() {

			@Override
			public int compare(jewelry o1, jewelry o2) {
				
				if(o1.weight == o2.weight) {
					return o2.value - o1.value;
				}
				
				return o1.weight - o2.weight;
			}
		});
		
		ArrayList<Integer> bag = new ArrayList<>();
		
		for(int i = 0; i < k; i++) {
			bag.add(Integer.parseInt(br.readLine()));
		}
		
		Collections.sort(bag);
		
		
		PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
		long result = 0;
		int idx = 0;
		for(int i = 0; i < k; i++) {
			
			
			while(idx < n && jewelry_list.get(idx).weight <= bag.get(i)) {
				
					
						pq.offer(jewelry_list.get(idx).value);
						
					
					idx++;
					
				
			}
			if(!pq.isEmpty()) {
				result += pq.poll();
			}
			
		}
			
		
		System.out.println(result);
		
		
		

	}
	    
	 
	
	
}
