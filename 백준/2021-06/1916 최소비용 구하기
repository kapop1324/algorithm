import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class Main {
	
	static class node implements Comparable<node>{
		
		int end;
		int weight;
		
		public node(int end, int weight) {
	
			this.end = end;
			this.weight = weight;
		}

		@Override
		public int compareTo(node o) {
			
			
			return this.weight - o.weight;
		}
		
	}
	
	static int n,m;
	static ArrayList<node>[] list;
	static int[] dis;
	static boolean[] visit;
	
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		n = Integer.parseInt(br.readLine());
		m = Integer.parseInt(br.readLine());
		
		list = new ArrayList[n+1];
		dis = new int[n+1];
		
		for(int i = 1; i <= n; i++) {
			dis[i] = 987654321;
			list[i] = new ArrayList<>();
		}
		
		for(int i = 0; i < m; i++) {
			st = new StringTokenizer(br.readLine()," ");
			int s = Integer.parseInt(st.nextToken());
			int e = Integer.parseInt(st.nextToken());
			int w = Integer.parseInt(st.nextToken());
			
			list[s].add(new node(e,w));
			
		}
		
		st = new StringTokenizer(br.readLine()," ");
		int start = Integer.parseInt(st.nextToken());
		int end = Integer.parseInt(st.nextToken());
		
		PriorityQueue<node> pq = new PriorityQueue<>();
		pq.add(new node(start,0));
		
		dis[start] = 0;
		
		while(!pq.isEmpty()) {
			
			node cur = pq.poll();
			if(dis[cur.end] < cur.weight) {
				continue;
			}
			
			for(int i = 0; i < list[cur.end].size(); i++) {
				node cur2 = list[cur.end].get(i);
				
				if(dis[cur2.end] > dis[cur.end] + list[cur.end].get(i).weight) {
					dis[cur2.end] = dis[cur.end] + list[cur.end].get(i).weight;
					pq.add(new node(cur2.end,dis[cur2.end]));
				}
				
			}
			
		}
	
	System.out.println(dis[end]);
		
	}
	
	
	
	
}
