import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

public class Main {
	
	static class node implements Comparable<node>{
		
		int start, end;
		int weight;
		
		public node(int start, int end, int weight) {
			this.start = start;
			this.end = end;
			this.weight = weight;
		}

		@Override
		public int compareTo(node o) {
			
			return this.weight - o.weight;
		}
		
	}
	
	static class point{
		int x, y, z, idx;
		public point(int idx, int x, int y, int z) {
			this.idx = idx;
			this.x = x;
			this.y = y;
			this.z = z;
		}
	}
	
	static int n;
	static int[] parent;
	static ArrayList<node> nodelist;
	static ArrayList<point> pointlist;
	
	public static void main(String[] args) throws Exception {
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		int n = Integer.parseInt(br.readLine());
		
		nodelist = new ArrayList<>();
		pointlist = new ArrayList<>();
			
		int result = 0;
			
		for(int i = 0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			int z = Integer.parseInt(st.nextToken());
				
			pointlist.add(new point(i,x,y,z));

			}
			
			Collections.sort(pointlist,new Comparator<point>() {

				@Override
				public int compare(point o1, point o2) {
					
					return o1.x - o2.x;
				}
			});
			
			for(int i = 0; i < n-1; i++) {
				int weight = Math.abs(pointlist.get(i).x - pointlist.get(i+1).x);
				nodelist.add(new node(pointlist.get(i).idx,pointlist.get(i+1).idx,weight));
			}
			
			Collections.sort(pointlist,new Comparator<point>() {

				@Override
				public int compare(point o1, point o2) {
					
					return o1.y - o2.y;
				}
			});
			
			for(int i = 0; i < n-1; i++) {
				int weight = Math.abs(pointlist.get(i).y - pointlist.get(i+1).y);
				nodelist.add(new node(pointlist.get(i).idx,pointlist.get(i+1).idx,weight));
			}
			
			Collections.sort(pointlist,new Comparator<point>() {

				@Override
				public int compare(point o1, point o2) {
					
					return o1.z - o2.z;
				}
			});
			
			for(int i = 0; i < n-1; i++) {
				int weight = Math.abs(pointlist.get(i).z - pointlist.get(i+1).z);
				nodelist.add(new node(pointlist.get(i).idx,pointlist.get(i+1).idx,weight));
				}
			
			parent = new int[n];
			
			for(int i = 0; i < n; i++) {
				parent[i] = i;
			}
			
			Collections.sort(nodelist);
			
			
			for(int i =0; i < nodelist.size(); i++) {
				node node = nodelist.get(i);
				
				if(find(node.start) != find(node.end)) {
					result += node.weight;
					union(node.start,node.end);
				}
				
			}
			
			System.out.println(result);
			
		
		
		
	}
	    
	public static int find(int a) {
		
		if(a == parent[a]) {
			return a;
		}
		
		return parent[a] = find(parent[a]);
	}
	
	public static void union(int a, int b) {
		
		int aroot = find(a);
		int broot = find(b);
		
		if(aroot != broot) {
			parent[broot] = a;
		}else {
			return;
		}
		
	}
	
	
}
