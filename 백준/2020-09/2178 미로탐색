import java.io.*;
import java.util.*;

public class Main {
   
	static int[] dx = {0, 0, -1, 1};
	static int[] dy = {-1, 1, 0, 0};
	static boolean[][] visited;
	static int[][] map;
	static int n,m;

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        
        map = new int[n][m];
        visited = new boolean[n][m];
        
        for(int i = 0; i < n; i++) {
        	st = new StringTokenizer(br.readLine());
        	String line = st.nextToken();
        	for(int j = 0 ; j < m ; j++) {
        		map[i][j] = line.charAt(j)-'0';
        	}
        }
        
        bfs(0,0);
        
        System.out.println(map[n-1][m-1]);
      
    }
    static public void bfs(int i, int j) {
    	Queue<int[]> q = new LinkedList<>();
    	q.offer(new int[] {i,j});
    	
    	while(!q.isEmpty()) {
    		int location[] = q.poll();
    		visited[i][j] = true;
    		
    		for(int dir = 0; dir < 4; dir++) {
    			int x = location[0] + dx[dir];
    			int y = location[1] + dy[dir];
    			
    			if(x >= 0 && x < n && y >=0 && y < m) {
    				if(map[x][y] != 0 && !visited[x][y]) {
    					q.offer(new int[] {x,y});
    					visited[x][y] = true;
    					map[x][y] = map[location[0]][location[1]] +1;
    				}
    			}
    		}
    	}
    }
 
}
