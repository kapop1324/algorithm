import java.io.*;
import java.util.*;

public class Main {
   
	static int[] dx = {0, 0, -1, 1};
	static int[] dy = {-1, 1, 0, 0};
	static int n;
	static int k;
	static int[][] map;
	static int max = 0;

    public static void main(String[] args) throws Exception{
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        map = new int[k][n];
        
        Queue<int[]> q = new LinkedList<>();
        for(int i = 0; i < k; i++) {
        	st = new StringTokenizer(br.readLine());
        	for(int j =0; j<n; j++) {
        		int m = Integer.parseInt(st.nextToken());
        		map[i][j] = m;
        		if(m==1) {
        			q.offer(new int[] {i , j});
        		}
        	}
        }
        bfs(q);
        
        if(!check()) {
        	System.out.println(-1);
        }
        else if( max ==0) {
        	System.out.println(max);
        }
        else {
        	System.out.println(max - 1);
        }
      
        
    }
    
    static public void bfs(Queue<int[]> q) {
    	while(!q.isEmpty()) {
    		int[] loc = q.poll();
    		for(int i = 0; i < 4; i++) {
    			int nx = loc[0] + dx[i];
    			int ny = loc[1] + dy[i];
    			if(0 <= nx && nx < k && 0 <= ny && ny <n) {
    				if(map[nx][ny] == 0) {
    					map[nx][ny] = map[loc[0]][loc[1]] + 1;
    					q.offer(new int[] {nx, ny});
    					if(map[nx][ny] > max) {
    						max = map[nx][ny];
    					}
    				}
    			}
    		}
    	}
    }
    static public boolean check() {
    	for(int i = 0; i < k; i++) {
    		for(int j = 0; j < n; j++) {
    			if(map[i][j] == 0) {
    				return false;
    			}
    		}
    	}
    	return true;
    }
 
}
