import java.awt.Point;
import java.io.*;
import java.util.*;



public class Main {
	
	static long cnt = 0;
	static long tmp[];
	static long arr[];
	
    public static void main(String args[]) throws NumberFormatException, IOException {
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
		
		int n = Integer.parseInt(br.readLine());
		
		ArrayList<Point> arr = new ArrayList<>();
		
		StringTokenizer st;
		
		for( int i =0; i < n; i++) {
			st = new StringTokenizer(br.readLine());
			
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			
			arr.add(new Point(x,y));
			
		}
		
		Collections.sort(arr,(p1,p2) -> p1.x - p2.x);
		 
		
		bw.write(closepair(arr, 0, n - 1) + "\n");
		bw.close();
		br.close();
		
    	
    }
    
    
    public static int dist(Point p, Point q) {
    	return (p.x - q.x) * (p.x - q.x) + (p.y - q.y) * (p.y - q.y);
    }
    
    public static int brute(ArrayList<Point> arr, int start, int end) {
    	
    	int mindist = Integer.MAX_VALUE;
    	for(int i  = start; i< end; i++ ) {
    		for(int j  = i+1; j<= end; j++ ) {
        		int k = dist(arr.get(i),arr.get(j));
        		mindist = Math.min(k, mindist);
        	}
    	}
    	
    	return mindist;
    }
    
    public static int closepair(ArrayList<Point> arr, int start, int end) {
    	
    	
    	int n = end - start + 1;
    	
    	if(n<=3) {
    		return brute(arr, start, end);
    	}
    	
    	int mid = (start+end)/2;
    	
    	int d = Math.min(closepair(arr, start, mid), closepair(arr, mid, end));
    	ArrayList<Point> band = new ArrayList<>();
    	
    	for(int i=start; i<=end; i++) {
    		int t = arr.get(mid).x - arr.get(i).x;
    		
    		if(t*t < d) {
    			band.add(arr.get(i));
    		}
    		
    	}
    	
    	Collections.sort(band,(p1, p2) -> p1.y - p2.y);
    	
    	for(int i=0; i<band.size(); i++) {
    		for(int j = i+1; j<band.size(); j++) {
    			int t = band.get(j).y - band.get(i).y;
    			
    			if(t*t < d) {
    				d = Math.min(d, dist(band.get(i), band.get(j)));
    			}
    			else {
    				break;
    			}
    		}
    	}
    	
    	return d;
    }
  
}




