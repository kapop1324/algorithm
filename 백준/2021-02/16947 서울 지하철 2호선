import java.util.*;
import java.util.stream.Collector.Characteristics;



import java.io.*;

		public class Main {
		    
			static int n,m;
		
			static ArrayList<Integer>[] list;
		
			static boolean[] cycle;
			
			static int[] result;
			static boolean[] check;
		  
		    public static void main(String[] args) throws IOException {
		       
		    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		    	StringTokenizer st = new StringTokenizer(br.readLine());
		    	
		    	n = Integer.parseInt(st.nextToken());
		    
		    	list = new ArrayList[n+1];
		    	for(int i =1; i <=n; i++) {
		    		list[i] = new ArrayList<>();
		    	}
		    
		    	for(int i = 0; i < n; i++) {
		    		st = new StringTokenizer(br.readLine()," ");
		    		int start = Integer.parseInt(st.nextToken());
		    		int end = Integer.parseInt(st.nextToken());
		    		
		    		list[start].add(end);
		    		list[end].add(start);
		    	
		    	}
		    	cycle = new boolean[n+1];
		    	for(int i = 1; i <= n; i++) {
		    		
		    		if(cycle(i,i,i)) {
		    			break;
		    		}
		    		else {
		    			cycle = new boolean[n+1];
		    		}
		    		
		    	}
		    	
		    	result = new int[n+1];
		    	
		    	for(int i = 1; i <= n; i++) {
		    		check = new boolean[n+1];
		    		if(cycle[i] == true) {
		    			result[i] = 0;
		    		}
		    		else {
		    			dis(i,i,i,0);
		    		}
		    		
		    	}
		    	
		    	
		    	for(int i = 1; i <= n; i++) {
		    		System.out.print(result[i]+" ");
		    	}
		    	
			 
		   }
		    
		   public static boolean cycle(int before, int now, int start) {
			   
			   cycle[now] = true;
			   
			   for(int i = 0; i < list[now].size(); i++) {
				   int next = list[now].get(i);
				   
				   if(cycle[next] == false) {
					   if(cycle(now, next, start)) {
						   return true;
					   }
				   }
				   else if(next != before && next == start) {
					   return true;
				   }
			   }
			   cycle[now] = false;
			  
			 return false;
			   
		   }
		   
		   public static void dis(int before, int now, int start,int sum) {
			   
			   check[now] = true;
			   
			   if(cycle[now] == true) {
				   result[start] = sum;
				   return;
			   }
			   
			   
			   for(int i = 0; i < list[now].size(); i++) {
				   int next = list[now].get(i);
				   
				   if(check[next] == false) {
					  dis(now,next,start,sum+1);
				   }
				  
			   }
			   
			   check[now] = false;
		   }
	

}
