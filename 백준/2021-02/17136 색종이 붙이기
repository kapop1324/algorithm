import java.io.*;
import java.util.*;

public class Main {
  
	static int[] paper = {0,5,5,5,5,5};
	static ArrayList<int[]> list = new ArrayList<>();
	static int[][] map = new int[10][10];
	static int min = Integer.MAX_VALUE;

    public static void main(String[] args) throws IOException {
       
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	 
    	StringTokenizer st;
    	

    	for(int i = 0; i < 10; i++) {
    		st = new StringTokenizer(br.readLine()," ");
    		
    		for(int j = 0; j < 10; j++) {
    			map[i][j] = Integer.parseInt(st.nextToken());
    			if(map[i][j] == 1) {
    				list.add(new int[] {i,j});
    			}
    			
    		}
    	}
    	

    	dfs(0,0);
    	if(min == Integer.MAX_VALUE) {
    		System.out.println(-1);
    	}else {
    		System.out.println(min);
    	}
    	
    }
    
    
    public static boolean check(int x, int y, int length) {
    	
    
    	
    	if(x+length > 10 || y+length > 10) {
    		return false;
    	}
    	
    	for(int i = 0; i < length; i++) {
    		for(int j = 0; j < length; j++) {
    			if(map[x+i][y+j] != 1)return false;
    		}
    	}
    	
    	return true;
    	
    }
    
    public static void fill(int x, int y, int length, int state) {
    	
    	for(int i = 0; i < length; i++) {
    		for(int j = 0; j < length; j++) {
    			map[x+i][y+j] = state;
    		}
    	
    	}
    }
    
    public static void dfs(int idx,int ans) {
    	
    	if(idx == list.size()) {
    		min = Math.min(min, ans);
    		return;
    		
    	}
    	
    	if(min <= ans) {
    		return;
    	}
    	
    	int r = list.get(idx)[0];
    	int c = list.get(idx)[1];
    	
    	if(map[r][c] == 1) {
    		for(int i = 1; i<=5; i++) {
        		
        		if(paper[i] > 0) {
        			if(check(r,c,i)) {
            			fill(r,c,i,0);
            			paper[i]--;
            			dfs(idx+1,ans+1);
            			fill(r,c,i,1);
                		paper[i]++;
            		}
        		}
        		
        	}
    	}
    	else {
    		dfs(idx+1,ans);
    	}
    	
    	
    		
    	
    	
    	
    }
    

    
}
