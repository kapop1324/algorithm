import java.io.*;
import java.util.*;

public class Main {
    private static int dx[] = {0,0,1,-1};
    private static int dy[] = {1,-1,0,0};
    private static int[] aparts;
    private static int n;
    private static int apartNum = 0; 
    private static boolean[][] visited; 
    private static int[][] map; 

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        n = sc.nextInt();

        map = new int[n][n];
        visited = new boolean[n][n];
        aparts = new int[n*n];

        for(int i=0; i<n; i++){
            String input = sc.next();
            for(int j=0; j<n; j++){
                map[i][j] = Integer.parseInt(input.substring(j,j+1));
            }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(map[i][j] == 1 && visited[i][j] == false){
                    apartNum++;
                    dfs(i,j);
                }
            }
        }
        
        Arrays.sort(aparts);
        
        System.out.println(apartNum);

        for(int i=0; i<aparts.length; i++){
            if(aparts[i] == 0){
            	continue;
            }else{               
                System.out.println(aparts[i]);
            }
        }
    }

    private static void dfs(int x, int y) {
    	
    	if(visited[x][y] == true) {
    		return;
    	}else {
    		visited[x][y] = true;
    	}
        
        aparts[apartNum]++;

        for(int i=0; i<4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];

            if(nx >=0 && ny >=0 && nx < n && ny < n){
                if(map[nx][ny] == 1 && visited[nx][ny]==false){
                    dfs(nx,ny);
                }
            }
        }
    }
}
