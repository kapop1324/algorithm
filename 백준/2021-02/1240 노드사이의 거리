import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Main {

    static int N;
    static long[][] graph;

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] str = br.readLine().split(" ");
        N = Integer.parseInt(str[0]);
        int M = Integer.parseInt(str[1]);
        graph = new long[N+1][N+1];

        for(int i=0; i<N-1; i++) {
            String[] input = br.readLine().split(" ");
            int start = Integer.parseInt(input[0]);
            int end = Integer.parseInt(input[1]);
            long cost = Long.parseLong(input[2]);

            graph[start][end] = cost;
            graph[end][start] = cost;
        }

        for(int i=0; i<M; i++) {
            String[] input = br.readLine().split(" ");
            int start = Integer.parseInt(input[0]);
            int end = Integer.parseInt(input[1]);
            long[] length = dijkstra(start);
            System.out.println(length[end]);
        }
    }


    static long[] dijkstra(int v){
        long distance[] = new long[N+1];
        boolean[] check = new boolean[N+1];

        for(int i=1;i<N+1;i++){
            distance[i] = Long.MAX_VALUE;
        }

        distance[v] = 0;
        check[v] = true;

        for(int i=1;i<N+1;i++){
            if(!check[i] && graph[v][i]!=0){
                distance[i] = graph[v][i];
            }
        }

        for(int a=0;a<N-1;a++){
            long min=Long.MAX_VALUE;
            int min_index=-1;

            for(int i=1;i<N+1;i++){
                if(!check[i] && distance[i]!=Long.MAX_VALUE){
                    if(distance[i]<min ){
                        min=distance[i];
                        min_index = i;
                    }
                }
            }

            check[min_index] = true;

            for(int i=1;i<N+1;i++){
                if(!check[i] && graph[min_index][i]!=0){
                    if(distance[i]>distance[min_index]+graph[min_index][i]){
                        distance[i] = distance[min_index]+graph[min_index][i];
                    }
                }
            }
        }

        return distance;
    }
}
