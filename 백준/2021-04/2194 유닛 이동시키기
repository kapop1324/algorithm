import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {    
	
	static int n, m, a, b, k;
	static int[][] map;
	static node start, end;
	static int[] dx = {0,0,-1,1};
	static int[] dy = {1,-1,0,0};
	static boolean[][] visit;
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        st = new StringTokenizer(br.readLine()," ");
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        a = Integer.parseInt(st.nextToken());
        b = Integer.parseInt(st.nextToken());
        k = Integer.parseInt(st.nextToken());
        
        map = new int[n+1][m+1];
        visit = new boolean[n+1][m+1];
        
        int x,y;
        
        for(int i = 0; i < k; i++) {
        	st = new StringTokenizer(br.readLine());
        	 x = Integer.parseInt(st.nextToken());
        	 y = Integer.parseInt(st.nextToken());
        	
        	map[x][y] = -1;
        	
        }
        
        st = new StringTokenizer(br.readLine());
        x = Integer.parseInt(st.nextToken());
        y = Integer.parseInt(st.nextToken());
        
        start = new node(x,y);
        
        st = new StringTokenizer(br.readLine());
        x = Integer.parseInt(st.nextToken());
        y = Integer.parseInt(st.nextToken());
        
        end = new node(x,y);
        
        
        Queue<node> q = new LinkedList<node>();
        q.add(start);
        visit[start.x][start.y] = true;
        int result = 0;
        boolean fin = false;
        
        while(!q.isEmpty()) {
        	
        	int size = q.size();
        	
        	for(int i = 0; i < size; i++) {
        		
        		node cur = q.poll();
        		
        		if(cur.x == end.x && cur.y == end.y) {
        			System.out.println(result);
        			System.exit(0);
        			
        		}
        		
        		for(int j = 0; j < 4; j++) {
        			int nx = cur.x + dx[j];
        			int ny = cur.y + dy[j];
        			
        			if(nx < 1 || nx > n || ny < 1 || ny > m) continue;
        			if(visit[nx][ny] == true) continue;
        			
        			if(range(nx,ny) == false) continue;
        			visit[nx][ny] = true;
        			q.add(new node(nx,ny));
        			
        		}
        		
        		
        	}
        	result++;
        	
        	
        }
        
        System.out.println(-1);
        	
      
    }
    
  
	public static boolean range(int x, int y) {
		
		
		
		
		for(int i = x; i < x+a; i++) {
			for(int j = y; j < y+b; j++) {
				
				if(i < 1 || j < 1 || i > n || j > m || map[i][j] == -1) return false;
			}
		}
		
		
		return true;
	}
	
	
}

class node{
	
	int x, y;
	
	node(int x, int y){
		this.x = x;
		this.y = y;
	}
}

