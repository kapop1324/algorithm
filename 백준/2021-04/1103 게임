import java.io.*;
import java.util.*;
public class Main {    
	static int n,m,t;
	static boolean[][] v;
	static char[][] map;
	static int[][] dp;
	static boolean back;
    static int[] dx = {0,0,1,-1};
    static int[] dy = {1,-1,0,0};
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        dp = new int[n][m];
        map = new char[n][m];
        v = new boolean[n][m];
        t = 0;
        for(int i = 0; i < n; i++) {
        	String s = br.readLine();
        	map[i] = s.toCharArray();
        }
        v[0][0] = true;
        back = false;
        dfs(0,0,1);
        if(back) {
        	System.out.println(-1);
        }else {
        	System.out.println(t);
        }
    }
    public static void dfs(int x, int y, int c) {
    	if(c > t) {
    		t = c;
    	}
    	dp[x][y] = c;
    	for(int i = 0; i < 4; i++) {
    		int u = map[x][y] - 48;
    		int nx = x + dx[i] * u;
    		int ny = y + dy[i] * u;
    		if(nx < 0 || nx >= n || ny < 0 || ny >= m || map[nx][ny] == 'H') continue;
    		if(v[nx][ny] == true) {
    			back = true;
    			return;
    		}
    		if(dp[nx][ny] > c) continue;
    		v[nx][ny] = true;
    		dfs(nx,ny,c+1);
    		v[nx][ny] = false;
    	}    	
    }
}
