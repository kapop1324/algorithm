import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {    
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
       StringBuilder sb = new StringBuilder();
        int n = Integer.parseInt(br.readLine());
        
        ball[] b = new ball[n];
        
        for(int i = 0; i < n; i++) {
        	st = new StringTokenizer(br.readLine()," ");
        	
        	int color = Integer.parseInt(st.nextToken())-1;
        	int weight = Integer.parseInt(st.nextToken());
        	
        	b[i] = new ball(i,color,weight);
        	
        }
        Arrays.sort(b);
        Queue<ball> q = new LinkedList<>();
        q.offer(b[0]);
        int[] color_sum = new int[n];
        int[] score = new int[n];
        int result = 0;
        for(int i = 1; i < n; i++) {
        	ball nb = q.peek();
        	if(nb.size < b[i].size) {
        		while(!q.isEmpty()) {
        			nb = q.poll();
        			color_sum[nb.color] += nb.size;
        			result += nb.size;
        		}
        		q.offer(b[i]);
        		score[b[i].idx] = result - color_sum[b[i].color];
        		
        	}else {
        		q.offer(b[i]);
        		score[b[i].idx] = result - color_sum[b[i].color];
        	}
        	
        }
       for(int i = 0; i < n ; i++) {
    	   sb.append(score[i]+"\n");
       }
       System.out.println(sb.toString());
        

    }
    

  
   


}

class ball implements Comparable<ball>{
	
	int idx,color,size;
	
	
	ball(int idx, int color, int size){
		this.idx = idx;
		this.color = color;
		this.size = size;
	}


	@Override
	public int compareTo(ball o) {
		
		if(this.size == o.size) {
			return this.color - o.color;
		}
		
		return this.size - o.size;
	}
	
	
	
}



