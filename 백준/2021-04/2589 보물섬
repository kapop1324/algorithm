import java.io.*;
import java.util.*;
 
public class Main {
    static int n,m,result;
    static char[][] map;
    static boolean[][] visit;
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};
 
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        map = new char[n][m];
        visit = new boolean[n][m];
        result = 0;
        
        for(int i = 0; i < n; i++) {
        	String s = br.readLine();
        	for(int j = 0; j < m; j++) {
        		map[i][j] = s.charAt(j);
        	}
        }
        
        for(int i = 0; i < n; i++) {
        	for(int j = 0; j < m; j++) {
        		if(map[i][j] == 'L') {
        			visit = new boolean[n][m];
        			result = Math.max(result, bfs(i,j));
        		}
        	}
        }
       
        System.out.println(result);
               
        
        
    }
    
    public static int bfs(int x, int y) {
    	
    	Queue<node> q = new LinkedList<node>();
    	int max = 0;
    	q.add(new node(x,y,0));
    	visit[x][y] = true;
    	
    	while(!q.isEmpty()) {
    		
    		node cur = q.poll();
    		
    		max = Math.max(max, cur.cnt);
    		
    		for(int i = 0; i < 4; i++) {
    			int nx = cur.x + dx[i];
    			int ny = cur.y + dy[i];
    			
    			if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
    			if(map[nx][ny] == 'W') continue;
    			if(visit[nx][ny] == true) continue;
    		
    			visit[nx][ny] = true;
    			
    			q.add(new node(nx,ny,cur.cnt+1));
    			
    			
    			
    		}
    		
    	}
    	
    	return max;
    	
    }
 
    
}

class node{
	int x, y, cnt;
	node(int x, int y, int cnt){
		this.x = x;
		this.y = y;
		this.cnt = cnt;
	}
}
