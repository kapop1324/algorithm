import java.io.*;
import java.util.*;
 
public class Main {
    static int h, w, result;
    static char[][] map;
    static ArrayList<node>[] gate;
    static boolean[][] visit;
    static boolean[] key;
    static int[] dx = {0, 0, 1, -1};
    static int[] dy = {1, -1, 0, 0};
 
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        int n = Integer.parseInt(br.readLine());
        
        for(int t = 0; t< n; t++) {
        	
        	st = new StringTokenizer(br.readLine()," ");
        	h = Integer.parseInt(st.nextToken());
        	w = Integer.parseInt(st.nextToken());
        	
        	map = new char[h+2][w+2];
        	visit = new boolean[h+2][w+2];
        	key = new boolean[26];
        	gate = new ArrayList[26];
        	result = 0;
        	String s;
        	
        	for(int i = 0; i < 26; i++) {
        		gate[i] = new ArrayList<node>();
        	}
        	
        	for(int i = 0; i < h+2; i++) {
        		Arrays.fill(map[i], '.');
        	}
        	
        	for(int i = 1; i <= h; i++) {
        		 s = br.readLine();
        		for(int j = 1; j <= w; j++) {
        			map[i][j] = s.charAt(j-1);
        		}
        	}
        	
        	s = br.readLine();
        	
        	if(!s.equals("0")) {
        		for(int i = 0; i < s.length(); i++) {
            		int num = s.charAt(i)-'a';
            		key[num] = true;
            	}
        	}
        	
        	
        	bfs();
        	System.out.println(result);
        	
        }
       
        
        
    }
    
    public static void bfs() {
    	
    	Queue<node> q = new LinkedList<node>();
    	q.add(new node(0,0));
    	visit[0][0] = true;
    	
    	while(!q.isEmpty()) {
    		
    		node cur = q.poll();
    		
    		for(int i = 0; i < 4; i++) {
    			int nx = cur.x + dx[i];
    			int ny = cur.y + dy[i];
    			
    			if(nx < 0 || nx >= h+2 || ny < 0 || ny >= w+2) continue;
    			if(map[nx][ny] == '*') continue;
    			if(visit[nx][ny] == true) continue;
    			
    			int next = map[nx][ny];
    			
    			if(next - 'A' >= 0 && next - 'A' < 26) {
    				if(key[next - 'A'] == true) {
    					map[nx][ny] = '.';
    					visit[nx][ny] = true;
    					q.add(new node(nx,ny));
    				}else {
    					gate[next-'A'].add(new node(nx,ny));
    				}
    			}else if(next - 'a' >= 0 && next - 'a' < 26) {
    				key[next - 'a'] = true;
    				visit[nx][ny] = true;
    				q.add(new node(nx,ny));
    				
    				for(int j = 0; j < 26; j++) {
    					if(gate[j].size() > 0 && key[j] == true) {
    						for(int k = 0; k < gate[j].size(); k++) {
    							node open_all = gate[j].get(k);
    							map[open_all.x][open_all.y] = '.';
    							visit[open_all.x][open_all.y] = true;
    							q.add(new node(open_all.x,open_all.y));
    						}
    					}
    				}
    				
    			}else if(next == '$') {
    				result++;
    				visit[nx][ny] = true;
    				q.add(new node(nx,ny));
    			}else {
    				visit[nx][ny] = true;
    				q.add(new node(nx,ny));
    			}
    			
    			
    		}
    		
    	}
    	
    	
    }
 
    
}

class node{
	int x, y;
	node(int x, int y){
		this.x = x;
		this.y = y;
	}
}
