import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {    
	static int n,m, result;
	static boolean[][][][] visit;
	static char[][] map;
	static node start;
	static node[] present;
    static int[] dx = {0,0,1,-1};
    static int[] dy = {1,-1,0,0};
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
       
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        
        map = new char[n][m];
        visit = new boolean[n][m][4][4];
        present = new node[2];

        int idx = 0;
        for(int i = 0; i < n; i++) {
            String s = br.readLine();
            for(int j = 0; j < m; j++) {
                map[i][j] = s.charAt(j);
                if(map[i][j] == 'S') {
                       start = new node(i,j,0,0);
                }
                if(map[i][j] == 'C') {
                    present[idx] = new node(i,j,0,0);
                    idx++;
             }
                
            }
        }
        result = -1;
        bfs();
        System.out.println(result);

    }
    
    public static void bfs() {
    	
    	Queue<node> q = new LinkedList<node>();
    	q.offer(new node(start.x,start.y,-1,0));
    	
    	for(int i = 0; i < 4; i++) {
    		visit[start.x][start.y][i][0] = true;
    	}
    	
    	int time = 0;
    	
    	while(!q.isEmpty()) {
    		
    		int size = q.size();
    		
    		for(int t = 0; t < size; t++) {
    			node cur = q.poll();
        		int cnt = cur.cnt;
        		if(cur.x == present[0].x && cur.y == present[0].y) {
        			if(cnt != 1) {
        				cnt+=1;
        			}
        		}
        		else if(cur.x == present[1].x && cur.y == present[1].y) {
        			if(cnt != 2) {
        				cnt+=2;
        			}
        		}
        		
        		if(cnt == 3) {
        			result = time;
        			return;
        		}
        		
        		for(int i = 0; i < 4; i++) {
        			int nx = cur.x + dx[i];
        			int ny = cur.y + dy[i];
        			
        			if(cur.dir == i) continue;
        			if(nx < 0 || nx >= n || ny < 0 || ny >= m) continue;
        			if(map[nx][ny] == '#') continue;
        			if(visit[nx][ny][i][cnt] == true) continue;
        			q.offer(new node(nx,ny,i,cnt));
        			visit[nx][ny][i][cnt] = true;
        			
        		}
        		
        	}
    		time++;
    		}
    	
    	
    }
   
}

class node{
	
	int x, y, dir, cnt;
	
	node(int x, int y, int dir, int cnt){
		this.x = x;
		this.y = y;
		this.dir = dir;
		this.cnt = cnt;
	}
}
