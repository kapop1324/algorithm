import java.util.*;
import java.io.*;
 

 
public class Main {
    
	static int n,cnt,age;
	static int[][] map;
	static Queue<node> q;
	static int[] dx = {1,-1,0,0};
	static int[] dy = {0,0,1,-1};
	
 
 
    public static void main(String[] args) throws Exception {
       
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
        
        n = Integer.parseInt(br.readLine());
      
        age = 2;
        q = new LinkedList<node>();
        
        map = new int[n][n];
        
        for(int i = 0; i <n; i++) {
        	st = new StringTokenizer(br.readLine()," ");
        	for(int j = 0; j < n; j++) {
        		map[i][j] = Integer.parseInt(st.nextToken());
        		if(map[i][j] == 9) {
        			q.add(new node(i,j,age));
        			map[i][j] = 0;
        		}
        		
        	}
        }
        
        cnt = 0;
        bfs(map);    
        
    
    }
    
    public static void bfs(int[][] map) {
    	
    	int eat = 0;
    	int time = 0;
    	
    	while(true) {
    		
    		node shark = q.peek();
    		Queue<node> food = new LinkedList<node>();
    		int[][] dis = new int[n][n];
    		
    		while(!q.isEmpty()) {
    			
    			node cur_q = q.poll();

        		for(int i = 0; i < 4; i++) {
        			int nx = cur_q.x + dx[i];
        			int ny = cur_q.y + dy[i];
        				
        			if(nx >= 0 && ny >= 0 && nx < n && ny < n && dis[nx][ny] == 0 && map[nx][ny] <= age) {
        					
        				dis[nx][ny] = dis[cur_q.x][cur_q.y] + 1;
        				
        				if(map[nx][ny] >= 1 && map[nx][ny] <= 6 && map[nx][ny] < age) {
        					
        					food.add(new node(nx,ny,dis[nx][ny]));
        					q.add(new node(nx,ny,dis[nx][ny]));
        					
        					
        				}else {
        					q.add(new node(nx,ny,dis[nx][ny]));
        				}
        				
        					
        				}
        			
        		}
        		
        	}
    		
    		if(food.size() == 0) {
    			System.out.println(time);
    			return;
    		}
    		
    		node f1 = food.poll();
    		
    		while(!food.isEmpty()) {
    			node f2 = food.poll();
    			
    			if(f1.dist > f2.dist) {
    				f1 = f2;
    			}
    			
    			if(f1.dist == f2.dist) {
    				if(f1.x > f2.x) {
    					f1 = f2;
    				}
    				else if(f1.x == f2.x && f1.y > f2.y) {
    					f1 = f2;
    				}
    			}
    			
    		}
    		
    		time += f1.dist;
    		eat++;
    		map[f1.x][f1.y] = 0;
    		
    		if(eat == age) {
    			age++;
    			eat = 0;
    		}
    		q.add(new node(f1.x,f1.y,age));
    		
    		
    	}

    }
 
}

class node{
	int x, y, dist;
	
	node(int x, int y, int dist){
		this.x = x;
		this.y = y;
		this.dist = dist;
	}
}
