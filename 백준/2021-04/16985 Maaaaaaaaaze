import java.io.*;
import java.util.*;
 
public class Main {    
	
	static int map[][][];
	static int[][][] copy;
	static boolean visit[][][];
	static int[] arr;
	static boolean[] check;
	static int[] dx = {0,0,1,-1,0,0};
	static int[] dy = {1,-1,0,0,0,0};
	static int[] dz = {0,0,0,0,1,-1};
	static int result;
	
    public static void main(String[] args) throws Exception {
    	
    	BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    	StringTokenizer st;
    	
    	map = new int[5][5][5];
    	copy = new int[5][5][5];
    	visit = new boolean[5][5][5];
    	arr = new int[5];
    	check = new boolean[5];
    	result = Integer.MAX_VALUE;
    	
    	for(int i =0; i <5; i++) {
    		for(int j = 0; j < 5; j++) {
    			st = new StringTokenizer(br.readLine()," ");
    			for(int k = 0; k < 5; k++) {
    				map[i][j][k] = Integer.parseInt(st.nextToken());
    			}
    		}
    	}
    	
    	dfs(0);
    	
    	if(result == Integer.MAX_VALUE) {
    		System.out.println(-1);
    	}else {
    		System.out.println(result);
    	}
    	
    	
    }
    
    public static void dfs(int idx) {
    	
    	if(idx == 5) {

    		
    		
    		order();

    		for(int r1 = 0; r1 < 4; r1++) {
    			rotate(4);
    			for(int r2 = 0; r2 < 4; r2++) {
    				rotate(3);
    				for(int r3 = 0; r3 < 4; r3++) {
    					rotate(2);
    					for(int r4 = 0; r4 < 4; r4++) {
    						rotate(1);
    						for(int r5 = 0; r5 < 4; r5++) {
    							rotate(0);
    							if(copy[0][0][0] == 1 && copy[4][4][4] == 1) {
    								bfs();
    							}    		    				
    		    			}
    	    			}
        			}
    			}
    			
    		}
    			
    		
    		return;
    	}
    	
    	for(int i = 0; i < 5; i++) {
    		if(check[i] == false) {
    			arr[i] = idx;
    			check[i] = true;
            	dfs(idx+1);
            	arr[i] = -1;
            	check[i] = false;
    		}
    		
    	}
    }

    
    public static void order() {
    	
    	for(int i = 0; i < 5; i++) {
    		for(int j = 0; j < 5; j++) {
    			for(int k = 0; k < 5; k++) {
    				copy[arr[i]][j][k] = map[i][j][k];
    			}
    		}
    	}
    	
    }
    
    public static void rotate( int layer) {
    	int[][][] temp = new int[1][5][5];
    	
    		for(int i = 0; i < 5; i++) {
    			for(int j = 0; j < 5; j++) {
    				temp[0][i][j] = copy[layer][4-j][i];
    			}
    		}
    		
    		for(int i = 0; i < 5; i++) {
    			for(int j = 0; j < 5; j++) {
    				copy[layer][i][j] = temp[0][i][j];
    			}
    		}
    	

    }
    
    public static void bfs() {
    	
    	Queue<node> q = new LinkedList<node>();
    	visit = new boolean[5][5][5];
    	q.offer(new node(0,0,0,0));
    	visit[0][0][0] = true;
    	
    	while(!q.isEmpty()) {
    		node cur = q.poll();
    		
    		int x = cur.x;
    		int y = cur.y;
    		int z = cur.z;
    		int cnt = cur.cnt;
    		
    		if(x == 4 && y == 4 && z == 4) {
    			result = Math.min(result, cnt);
    			return;
    		}
    		
    		for(int i = 0; i < 6; i++) {
    			int nx = dx[i] + x;
    			int ny = dy[i] + y;
    			int nz = dz[i] + z;
    			
    			if(nx < 0 || nx >= 5 || ny < 0 || ny >= 5 || nz < 0 || nz >= 5) continue;
    			if(visit[nz][nx][ny] == true || copy[nz][nx][ny] == 0) continue;
    			visit[nz][nx][ny] = true;
    			q.offer(new node(nx,ny,nz,cnt+1));
    		
    		}
    		
    	}
    	
    }
}

class node {
	
	int x, y, z, cnt;
	
	node(int x, int y, int z, int cnt){
		
		this.x = x;
		this.y = y;
		this.z = z;
		this.cnt = cnt;
		
	}
}
