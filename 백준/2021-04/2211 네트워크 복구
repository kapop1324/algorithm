import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
 
public class Main {    
 
   
    
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine()," ");
        int n = Integer.parseInt(st.nextToken());
        int m = Integer.parseInt(st.nextToken());
        ArrayList<Node>[] list = new ArrayList[n+1];
        int[] path = new int[n+1];
        
        for(int i = 1; i <= n; i++) {
        	list[i] = new ArrayList<>();
        }
        
        
        
        
        for(int i = 0; i < m; i++) {
        	st = new StringTokenizer(br.readLine(), " ");
        	int a = Integer.parseInt(st.nextToken());
        	int b = Integer.parseInt(st.nextToken());
        	int c = Integer.parseInt(st.nextToken());
        	list[a].add(new Node(b,c));
        	list[b].add(new Node(a,c));
        }
        
        
        
        
        int[] d = new int[n+1];
   
        
        Arrays.fill(d, Integer.MAX_VALUE);
        
        PriorityQueue<Node> pq = new PriorityQueue<>();
        pq.add(new Node(1,0));
        d[1] = 0;
        while(!pq.isEmpty()) {
        	Node a = pq.poll();
        	
        	for(Node b : list[a.edge]) {
        		if(d[b.edge] > a.value + b.value) {
        			d[b.edge] = a.value + b.value;
        			path[b.edge] = a.edge;
        			pq.add(new Node(b.edge, a.value+b.value));
        		}
        	}
        		
        	
        }
        System.out.println(n-1);
        for(int i = 2; i <= n; i++) {
        	
        		System.out.println(i+" "+path[i]);
        	
        	
        }
    }    
    
    
 

}

class Node implements Comparable<Node>{
    int edge;
    int value;

    public Node(int edge, int value){
        this.edge = edge;
        this.value = value;
    }

    @Override
    public int compareTo(Node o) {
        return value - o.value;
    }
}
