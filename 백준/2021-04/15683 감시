import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {    
		
		static int n,m;
		static int[][] map;
		//상하좌우
		static int[][] camera = {{},{1},{1,3},{0,1},{0,1,3},{0,1,2,3}};
		static int[] dx = {-1,0,1,0};
		static int[] dy = {0,1,0,-1};
		static int min;
		
		static ArrayList<node> list = new ArrayList<>();
		
	    public static void main(String[] args) throws IOException {
	        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
	        StringTokenizer st = new StringTokenizer(br.readLine()," ");
	        n = Integer.parseInt(st.nextToken());
	        m = Integer.parseInt(st.nextToken());
	        
	        map = new int[n][m];
	        
	        for(int i = 0; i < n; i++) {
	        	st = new StringTokenizer(br.readLine()," ");
	        	for(int j = 0; j < m; j++) {
	        		map[i][j] = Integer.parseInt(st.nextToken());
	        		if(map[i][j] > 0 && map[i][j] <6) {
	        			list.add(new node(i,j,map[i][j]));
	        		}
	        	}
	        }
	       
	        min = Integer.MAX_VALUE;
	        dfs(0,map);
	        System.out.println(min);
	        
	      }
	    
	    public static void dfs(int idx,int[][] map) {
	    	
	    	if(idx == list.size()) {
	    		
	    		int ans = 0;
	    		for(int i = 0; i <n; i++) {
	    			for(int j = 0; j < m; j++) {
	    				if(map[i][j] == 0) {
	    					ans++;
	    				}
	    			}
	    		}
	    		
	    		min = Math.min(min, ans);
	    		
	    		return;
	    	}
	    	
	    	int x = list.get(idx).x;
	    	int y = list.get(idx).y;
	    	int v = list.get(idx).v;
	    	
	    	for(int i = 0; i < 4; i++) {
	    		int[][] copy = new int[n][m];
	    		
	    		for(int j =0; j < n; j++) {
	    			for(int k = 0; k < m; k++) {
	    				copy[j][k] = map[j][k];
	    			}
	    		}
	    	
	    		for(int j =0; j <camera[v].length; j++) {
	    			int nx = x;
	    			int ny = y;
	    			int d = (camera[v][j]-i + 3) % 4;
	    			
	    			while(true) {
	    				nx += dx[d];
	    				ny += dy[d];
	    				if(nx < 0 || nx >= n || ny < 0 || ny >= m) break;
	    				if(copy[nx][ny] == 6) break;
	    				copy[nx][ny] = -1;
	    			}
	    			
	    		}
	    		dfs(idx+1,copy);
	    	}
	    	
	    }
}

class node{
	int x, y, v;
	node(int x, int y, int v){
		this.x = x;
		this.y = y;
		this.v = v;
	}
}

