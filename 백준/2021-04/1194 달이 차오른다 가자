import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class Main {    
	
	static char[][] map;
	static int n, m;
	static boolean[][][] visit;
	static int[] dx = {0,0,1,-1};
	static int[] dy = {1,-1,0,0};
	static node start;
	
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        
        map = new char[n][m];
        visit = new boolean[n][m][100];

        for(int i = 0; i < n; i++) {
        	String s = br.readLine();
        	for(int j = 0; j < m; j++) {
        		map[i][j] = s.charAt(j);
        		if(map[i][j] == '0') {
        			start = new node(i,j,0,0);
        		}
        	}
        }
        
        bfs();
       
    }
    
	public static void bfs() {
		
		Queue<node> q = new LinkedList<node>();
		q.add(start);
		visit[start.x][start.y][0] = true;
		
		while(!q.isEmpty()) {
			
			node cur = q.poll();
			
			if(map[cur.x][cur.y] == '1') {
				System.out.println(cur.cnt);
				return;
			}
			
			for(int i = 0; i < 4 ; i++) {
				
				int nx = cur.x + dx[i];
				int ny = cur.y + dy[i];
				
				if(nx < 0|| nx >= n || ny < 0 || ny >= m) continue;
				if(map[nx][ny] == '#') continue;
				if(visit[nx][ny][cur.key] == true) continue;
				
				if(map[nx][ny]-'a' >= 0 && map[nx][ny] - 'a' < 6) {
					
					int new_key = (1<<(map[nx][ny]-'a')) | cur.key;
					
					if(visit[nx][ny][new_key] == false) {
						visit[nx][ny][new_key] = true;
						visit[nx][ny][cur.key] = true;
						q.add(new node(nx,ny,cur.cnt+1,new_key));
					}
					
				}else if(map[nx][ny]-'A' >= 0 && map[nx][ny] - 'A' < 6) {
					
					int open_door = (1<<(map[nx][ny] - 'A')) & cur.key;
					
					if(open_door>0) {
						visit[nx][ny][cur.key] = true;
						q.add(new node(nx,ny,cur.cnt+1,cur.key));
					}
					
				}else {
					visit[nx][ny][cur.key] = true;
					q.add(new node(nx,ny,cur.cnt+1,cur.key));
				}
				
			}
			
			
		}
		
		System.out.println(-1);
		
	}
	
	
}

class node{
	
	int x,y,cnt,key;
	
	node(int x, int y, int cnt, int key){
		this.x = x;
		this.y = y;
		this.cnt = cnt;
		this.key = key;
		
	}
}

