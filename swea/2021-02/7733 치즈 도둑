import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;
 
   
class Solution
{
     
    static int[][] arr;
    static int n;
    static int max;
    static boolean[][] visited;
    static int cnt;
    static int[] dx = {-1,1,0,0};
    static int[] dy = {0,0,-1,1};
     
    public static void main(String[] args) {
        
        Scanner sc = new Scanner(System.in);
          
        int tc = sc.nextInt();
        
        for(int t = 1; t<=tc; t++) {
             
            n = sc.nextInt();
             
            arr = new int[n+2][n+2];
             
            for(int i = 1; i <= n; i++) {
                for(int j = 1; j <=n; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }
            max = 0;
             
            for(int k = 0; k <= 100; k++) {
                 
                outdate(k);
                cnt = 0;
                visited = new boolean[n+2][n+2];
                 
                 
                for(int i = 1; i <= n; i++) {
                    for(int j = 1; j <=n; j++) {
                        if(visited[i][j] == false && arr[i][j] != 0) {
                             
                            search(i,j,true);
                        }
                         
                    }
                     
                }
                 
                max = Math.max(max, cnt);
                 
                 
                 
            }
          
        System.out.println("#"+t+" "+max);
               
             
             
        }
           
            
    }
     
    public static void outdate(int day) {
        for(int i = 1; i <= n; i++) {
            for(int j = 1; j <=n; j++) {
                if(arr[i][j] == day) {
                    arr[i][j] = 0;
                }
            }
        }
    }
     
    public static void search(int x, int y, boolean start) {
             
            if(start == true) {
                cnt++;
            }
         
            if(arr[x][y] != 0 && visited[x][y] == false) {
                    visited[x][y] = true;
                     
                }
            else {
                 
                return;
                 
            }
                     
            for(int k = 0; k < 4; k++) {
             
            if(x-1 >= 0 && x + 1 <= n+1 && y-1 >= 0 && y + 1 <=n+1
            && arr[x+dx[k]][y+dy[k]] != 0 && visited[x+dx[k]][y+dy[k]] == false) {
                 
                search(x+dx[k],y+dy[k],false);
                 
            }
        }
         
    }
     
    
      
}
