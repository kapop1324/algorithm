import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;
   
class Solution
{
       
   
    static int[][] arr ;
    static int n;
    static int cnt_max;
    static int start_num;
     
       
    public static void main(String[] args) {
       
        Scanner sc = new Scanner(System.in);
         
        int tc = sc.nextInt();
       
        for(int t = 1; t<=tc; t++) {
            n = sc.nextInt();
             
            arr = new int[n][n];
             
            for(int i = 0; i < n; i++) {
                for(int j = 0; j < n; j++) {
                    arr[i][j] = sc.nextInt();
                }
            }
             
             
         cnt_max = 0;
        start_num = 0;
             
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                  recursive(i,j,1,arr[i][j]);
            }
        }
        
        System.out.println("#"+t+" "+start_num+" "+cnt_max);
              
            
            
        }
          
           
    }
     
    public static void recursive(int x, int y, int cnt, int start) {
         
        if(x-1 >= 0 && arr[x][y]+1 == arr[x-1][y]) {
             
            recursive(x-1, y, cnt+1,start);
        }
         
         if(x+1 < n && arr[x][y]+1 == arr[x+1][y]) {
             
            recursive(x+1, y, cnt+1,start);
        }
         
         if(y-1 >= 0 && arr[x][y]+1 == arr[x][y-1]) {
             
            recursive(x, y-1, cnt+1,start);
        }
         
         if(y+1 < n && arr[x][y]+1 == arr[x][y+1]) {
             
            recursive(x, y+1, cnt+1,start);
        }
         
        else {
             
            if(cnt > cnt_max) {
                cnt_max = cnt;
                start_num = start;
                 
            }
            else if(cnt == cnt_max) {
                start_num = Math.min(start, start_num);
            }
             
             
            return;
        }
         
    }
     
      
     
}
