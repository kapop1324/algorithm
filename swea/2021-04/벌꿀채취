import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
import java.util.StringTokenizer;
  
public class Solution {
      
    static int map[][];
    static int arr[][];  
    static boolean visit[][];
    static int n,m,c;
     
    public static void main(String[] args) throws Exception {
 
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
         
         
        int tc = Integer.parseInt(br.readLine());
         
        for(int t = 1; t <= tc; t++) {
            st = new StringTokenizer(br.readLine()," ");
            n = Integer.parseInt(st.nextToken());
            m = Integer.parseInt(st.nextToken());
            c = Integer.parseInt(st.nextToken());
             
            map = new int[n][n];
            arr = new int[n][n];
            visit = new boolean[n][n];
             
            for(int i = 0; i < n; i++) {
                st = new StringTokenizer(br.readLine()," ");
                for(int j = 0; j < n; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }
             
            for(int i = 0; i < n; i++) {
                for(int j = 0; j <= n-m; j++) {
                    dfs(i,j,0,0,0);
                }
            }
             
            int result = 0;
 
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n-1; j++) {
                   
                    for(int k = 0; k<n; k++) {
                        for(int p = 0; p<n; p++) {
                            if(i == k && p < j+m) continue;
                            result = Math.max(result, arr[i][j] + arr[k][p]);
                        }
                    }
                }
            }
                 
            System.out.println("#"+t+" "+result);
        }
         
    }
             
         
     
 
    public static void dfs(int x, int y,int idx, int sum, int sum_cal) {
         
        if(sum > c) {
            return;
        }
         
        if(idx == m) {
            arr[x][y-m] = Math.max(sum_cal, arr[x][y-m]);
            return;
        }
         
         
         
        dfs(x,y+1,idx+1,sum+map[x][y],sum_cal+map[x][y]*map[x][y]);
        dfs(x,y+1,idx+1,sum,sum_cal);
         
    }
 
         
  
}
