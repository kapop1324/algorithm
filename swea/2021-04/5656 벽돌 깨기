import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
 
public class Solution {
    static int n, w, h;
    static int[][] map;
    static int[][] copy;
    static int[] per;
    static int result;
    static boolean[][] visited;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};
    static Queue<int[]> q = new LinkedList<>();
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
         
        int tc = Integer.parseInt(br.readLine());
         
        for(int t = 1; t<=tc; t++) {
            StringTokenizer st = new StringTokenizer(br.readLine());
             
             
             
            n = Integer.parseInt(st.nextToken());
            w = Integer.parseInt(st.nextToken());
            h = Integer.parseInt(st.nextToken());
            map = new int[h][w];
            per = new int[n];
             
            for(int i = 0; i < h; i++) {
                st = new StringTokenizer(br.readLine());
                for(int j = 0; j < w; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                }
            }
            result = Integer.MAX_VALUE;
            dfs(0);
            System.out.println("#"+t+" "+result);
        }
         
         
         
         
    }
     
    public static void dfs(int idx) {
         
        if(idx == n) {
             
            copy = new int[h][w];
            for(int i = 0; i < h; i++) {
                for(int j = 0; j < w; j++) {
                    copy[i][j] = map[i][j];
                }
            }
             
            for(int i = 0; i < n; i++) {
                bomb(per[i]);
                if(check() == true) {
                    result = 0;
                    return;
            }
                down();
                 
            }
             
            int cnt = 0;
             
            for(int i = 0; i < h; i++) {
                for(int j = 0; j < w; j++) {
                    if(copy[i][j] != 0) {
                        cnt++;
                    }
                }
            }
             
            result = Math.min(cnt, result);
            return;
             
        }
         
        for(int i = 0; i < w; i++) {
            per[idx] = i;
            dfs(idx+1);
        }
         
    }
     
    public static void bomb(int idx) {
        for(int i = 0; i < h; i++) {
             
                if(copy[i][idx] != 0) {
                    bfs(i,idx);
                    return;
                }
             
        }
    }
     
    public static void bfs(int y, int x) {
         
        q.offer(new int[]{y,x,copy[y][x]-1});
         
        while(!q.isEmpty()) {
             
            int[] cur = q.poll();
            copy[cur[0]][cur[1]] = 0;
             
            for(int i = 0; i < 4; i++) {
                for(int j = 0; j < cur[2]; j++) {
                    int nx = cur[1] + (dx[i]*(j+1));
                    int ny = cur[0] + (dy[i]*(j+1));
                     
                    if(ny >= h || ny < 0 || nx < 0 || nx >= w) continue;
                    if(copy[ny][nx] == 0) continue;
                    q.offer(new int[] {ny,nx,copy[ny][nx]-1});
                    copy[ny][nx] = 0;
                }
            }
             
        }
         
         
    }
     
    public static boolean check() {
        for(int i = 0; i <h; i++) {
            for(int j = 0; j < w; j++) {
                if(copy[i][j] != 0) {
                    return false;
                }
            }
        }
        return true;
    }
     
    public static void down() {
         
        boolean flag = false;
         
        for(int i = h-1; i >= 0; i--) {
            for(int j = 0; j < w; j++) {
                if(i-1 >= 0 && (copy[i][j] == 0 && copy[i-1][j] != 0)) {
                    copy[i][j] = copy[i-1][j];
                    copy[i-1][j] = 0;
                    flag = true;
                }
            }
        }
        if(flag == true) {
            down();
        }
         
         
    }
     
 
     
}
