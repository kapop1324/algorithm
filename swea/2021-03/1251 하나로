import java.io.*;
import java.util.*;
  
public class Solution {
 
  
    public static void main(String args[]) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int tc = Integer.parseInt(br.readLine());
          
        for(int t=1; t<=tc; t++) {
              
            int n = Integer.parseInt(br.readLine());
            int[][] arr = new int[n][2];
             
            boolean[] visit = new boolean[n];
            double ans = 0;
              
            StringTokenizer x = new StringTokenizer(br.readLine()," ");
            StringTokenizer y = new StringTokenizer(br.readLine()," ");
            for (int i = 0; i < n; i++) {
                 
                arr[i][0] = Integer.parseInt(x.nextToken());
                arr[i][1] = Integer.parseInt(y.nextToken());
                 
            }
              
            double eco = Double.parseDouble(br.readLine()); 
              
            int cnt = 0;
            PriorityQueue<Node> pq = new PriorityQueue<>();
            pq.add(new Node(0, 0));
              
            while(!pq.isEmpty()) {
                Node cur = pq.poll();
                  
                if(visit[cur.vertex]) continue;
                  
                visit[cur.vertex] = true;
                ans += cur.value;
                if(cnt++ == n) break;
                  
                for (int i = 1; i < n; i++) {
                    if(!visit[i]) {
                        double value = (Math.pow((arr[i][0] - arr[cur.vertex][0]), 2) 
                                + Math.pow((arr[i][1] - arr[cur.vertex][1]), 2));
                        pq.add(new Node(i, value));
                    }   
                }
            }
            System.out.println("#"+t+" "+Math.round(ans * eco));
        }    
    }
     
   public static class Node implements Comparable<Node>{
        int vertex;
        double value;
  
        public Node(int vertex, double value) {
            this.vertex = vertex;
            this.value = value;
        }
  
        @Override
        public int compareTo(Node o) {
            return Double.compare(this.value, o.value);
        }
          
          
    }
}
