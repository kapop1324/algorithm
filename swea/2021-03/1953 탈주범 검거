import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.StringTokenizer;
  
class Solution
{
    static int n,m,r,c,l;
    static int[][] map;
    static int[][] visit;
    static int[] dx = { -1, 0, 1, 0 };
    static int[] dy = { 0, 1, 0, -1 };
    static int[][] pipe = {{0,0,0,0},{1,1,1,1},{1,0,1,0},{0,1,0,1},{1,1,0,0},{0,1,1,0},{0,0,1,1},{1,0,0,1}};
    public static void main(String args[]) throws Exception
    {   
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
  
        int tc = Integer.parseInt(br.readLine());
        for (int t = 1; t <= tc; t++) {
            st = new StringTokenizer(br.readLine()," ");
            n = Integer.parseInt(st.nextToken());
            m = Integer.parseInt(st.nextToken());
            r = Integer.parseInt(st.nextToken());
            c = Integer.parseInt(st.nextToken());
            l = Integer.parseInt(st.nextToken());
             
            map = new int[n][m];
            visit = new int[n][m];
             
 
             
            for (int i = 0; i < n; i++) {
                st = new StringTokenizer(br.readLine()," ");
                for (int j = 0; j < m; j++) {
                        map[i][j] = Integer.parseInt(st.nextToken());
                         
                }
            }
             
 
            Queue<int[]> queue = new LinkedList<>();
            queue.offer(new int[] {r,c});
             
            visit[r][c] = 1;
             
            while(!queue.isEmpty()) {
                 
 
                int[] a = queue.poll();
                int x = a[0];
                int y = a[1];
                int time = visit[x][y];
                int p = map[x][y];
                 
                if(time == l) {
                    break;
                }
                 
                for(int i=0;i<4;i++) {
                     
                    if(pipe[p][i] == 0) {
                        continue;
                    }
                     
                    int nx = x + dx[i];
                    int ny = y + dy[i];
                     
                    if (nx < 0 || nx >= n || ny < 0 || ny >= m) {
                        continue;
                    }
                     
                    if (map[nx][ny] == 0 || visit[nx][ny] > 0) {
                        continue;
                    }
                         
                    if (pipe[map[nx][ny]][(i + 2) % 4] == 0)
                        continue;
                     
                    visit[nx][ny] = time + 1;
                    queue.offer(new int[] {nx,ny});
                    
                }
                
                 
            }
            int res = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < m; j++) {
                    if(visit[i][j] > 0) {
                        res++;
                    }
                     
                }
             
                 
            }
             
             
            System.out.println("#" + t + " " + (res));
        }
    }
}
