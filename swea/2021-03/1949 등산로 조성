import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
 
public class Solution {
     
    static int max;
    static boolean[][] visit;
    static int[] dx = {0,0,1,-1};
    static int[] dy = {1,-1,0,0};
    static int[][] map;
    static int n,k;
    static int ans;
    static boolean flag;
     
    public static void main(String[] args) throws Exception {
         
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st;
         
        int tc = Integer.parseInt(br.readLine());
        for(int t = 1; t <= tc; t++) {
             
            st = new StringTokenizer(br.readLine()," ");
             
             n = Integer.parseInt(st.nextToken());
             k = Integer.parseInt(st.nextToken());
            max = Integer.MIN_VALUE;
            ans = Integer.MIN_VALUE;
            map = new int[n][n];
             
             
            for(int i = 0; i <n; i++) {
                st = new StringTokenizer(br.readLine()," ");
                for(int j = 0; j < n; j++) {
                    map[i][j] = Integer.parseInt(st.nextToken());
                    max = Math.max(max, map[i][j]);
                }
            }
             
            for(int i = 0; i <n; i++) {
                 
                for(int j = 0; j < n; j++) {
                     
                    if(map[i][j] == max) {
                        visit = new boolean[n][n];
                        visit[i][j] = true;
                         
                        dfs(i,j,1,false);
                         
                         
                    }
                     
                     
                     
                }
            }
            System.out.println("#"+t+" "+ans);
         
        }
             
         
    }
     
    public static void dfs(int x, int y,int cnt, boolean cut) {
         
        int nx = 0;
        int ny = 0;
        ans = Math.max(ans, cnt);
         
        for(int i = 0; i < 4; i++) {
            nx = x + dx[i];
            ny = y + dy[i];
             
            if(nx >= 0 && ny >= 0 && nx < n && ny < n && visit[nx][ny] == false) {
                 
                if(map[nx][ny] >= map[x][y]) {
                     
                    if(cut) {
                        continue;
                    }
                     
                     if (map[nx][ny] - map[x][y] < k) {
                            visit[x][y] = true;
                            int backup = map[nx][ny];
                            map[nx][ny] = map[x][y] - 1;
                            dfs(nx, ny, cnt + 1, true);
                            map[nx][ny] = backup;
                            visit[x][y] = false;
                        }
                     
                     
                }else {
                    visit[x][y] = true;
                    dfs(nx,ny,cnt+1,cut);
                    visit[x][y] = false;
                }
                 
                 
            }
                 
        }
    }
 
}
