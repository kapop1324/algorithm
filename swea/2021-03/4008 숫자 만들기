import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;
import java.util.StringTokenizer;
 
public class Solution {
 
    static int tc, N;
    static int[] number, input;
    static int min, max, answer;
     
     
    public static void main(String[] args) throws IOException {
         
        Scanner sc = new Scanner(System.in);
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st ;
         
        st = new StringTokenizer(br.readLine()," ");
        tc = Integer.parseInt(st.nextToken());
         
        for( int t=1; t<=tc; t++) {
             
            st = new StringTokenizer(br.readLine()," ");
            N = Integer.parseInt(st.nextToken());
             
            number = new int[N]; 
            input = new int[4];
            min = Integer.MAX_VALUE;
            max = Integer.MIN_VALUE;
             
            st = new StringTokenizer(br.readLine()," ");
            for( int i=0; i<4; i++) {
                input[i] = Integer.parseInt(st.nextToken());
                 
            } 
             
            st = new StringTokenizer(br.readLine()," ");
            for( int i=0; i<N; i++) {
                number[i] = Integer.parseInt(st.nextToken()); 
            } 
 
            dfs(0, number[0]);
             
            answer = max - min;
             
            System.out.println("#"+t+" "+answer);
        }
    }
     
 
    private static void dfs(int idx, int value ) {
         
        if ( idx == N-1) {
 
            min = Math.min(value, min);
            max = Math.max(value, max);
            return;
        }
         
         
        for( int i=0; i<4; i++) {
             
            if( input[i] > 0 ) {
                 
                input[i]--;
                switch( i ) {
                 
                case 0:
                    dfs( idx +1 , value + number[idx+1]);
                    break;
                case 1:
                    dfs( idx +1 , value - number[idx+1]);
                    break;
                case 2:
                    dfs( idx +1 , value * number[idx+1]);
                    break;
                case 3:
                    dfs( idx +1 , value / number[idx+1]);
                    break;
                default:
                    break;
                }
                input[i]++;
            }
        }
         
    }
}
